@page "/siwe"

@using System.IO;
@using Nethereum.UI;
@using Nethereum.Metamask;
@using Nethereum.Erc20.Blazor;
@using siwe.Messages
@using siwe_nethereum.Data
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@inject SiweService _siweService;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;

<MudItem xs="12" sm="6" md="3">
    <MudTextField @bind-Value="SelectedAccount" Label="Selected Account:" ReadOnly="true" Variant="Variant.Filled" />
</MudItem>
<MudSpacer />
<div class="card m-1">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-6">
            @if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
             {
                <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
             }
             else
             {
                <small id="selectedAccountHelp" class="form-text text-muted">Select an account</small>
             }
            </div>
        </div>
    </div>
</div>
<MudSpacer />

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <!--
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudMenu Label="Connect">
                <MudMenuItem>Metamask</MudMenuItem>
                <MudMenuItem>WalletConnect</MudMenuItem>
            </MudMenu>
        </MudItem>
    </MudGrid>
    <MudSpacer />
    -->
    <!--
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField Label="Message to Save" Variant="Variant.Outlined" @bind-Value="SampleText" Lines="10"/>
        </MudItem>
    </MudGrid>
    -->
    <textarea id="SaveText" name="Mesage to Save" rows="10" cols="100" @oninput="HandleOnChange">
    @SampleText
    </textarea>
    <MudGrid>
        <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="UpdateText" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2" />
    </MudGrid>
</MudContainer>

@if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
{
    <MudSpacer/>
    <br/>
    <div class="card m-1">
        <div class="card-body">
            <div class="row">
                <label class="col-sm-3 col-form-label-lg">Authentication by signing:</label>
                <div class="col-sm-6">
                    <button @onclick="@AuthenticateAsync">Authenticate</button>
                    <div>@AuthenticatedAccount</div>
                    <small id="selectedAccountHelp" class="form-text text-muted">Creating an unique challenge per authentication request, allows us to recover and validate what account has signed the message</small>
                </div>
            </div>
        </div>
    </div>
}

@code {

    string SelectedAccount = String.Empty;

    bool EthereumAvailable { get; set; }
    string ChainId { get; set; }
    string BlockHash { get; set; }
    string SampleText { get; set;}

    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;

            EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();

            SelectedAccount = await _ethereumHostProvider.GetProviderSelectedAccountAsync();

            var SelectedNetwork = await _ethereumHostProvider.GetProviderSelectedNetworkAsync();
            if (SelectedNetwork >= 0)
            {
                ChainId = Convert.ToString(SelectedNetwork);
            }

            FileInfo textFile = new FileInfo("../db/" + SelectedAccount + ".txt");
            if (!String.IsNullOrEmpty(SelectedAccount) && textFile.Exists)
            {
                SampleText = await File.ReadAllTextAsync(textFile.FullName);
            }
            else
            {
                SampleText = "Oompa Loompa";
            }

            this.StateHasChanged();
        }
    }

    private async Task HandleOnChange(ChangeEventArgs args)
    {
        SampleText = args.Value.ToString();
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;

        FileInfo textFile = new FileInfo("../db/" + SelectedAccount + ".txt");
        if (!String.IsNullOrEmpty(SelectedAccount) && textFile.Exists)
        {
            SampleText = await File.ReadAllTextAsync(textFile.FullName);
        }

        await SiweSignIn();

        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    public async Task AuthenticateAsync()
    {
        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();
    }

    protected async Task SiweSignIn()
    {
        // NOTE: Provider class does not yet implement ENS resolution
        var ENSAddress = String.Empty;

        var newNonce = await _siweService.GetNonce();

        var message =
            new SiweMessage()
                {
                    Domain = "localhost"
                    , Address = this.SelectedAccount
                    , ChainId = this.ChainId
                    , Uri = "https://localhost"
                    , Version = "1"
                    , Statement = "SIWE Notepad Example"
                    , Type = SignatureType.PERSONAL_SIGNATURE
                    , Nonce = newNonce
                };

        var signature = await _ethereumHostProvider.SignMessageAsync(message.SignMessage());

        message.Signature = signature;

        var MeResult = await _siweService.PostSignIn(message);
    }

    public async Task UpdateText()
    {
        DirectoryInfo dbDir = new DirectoryInfo("../db");        
        if (!dbDir.Exists)
        {
            dbDir.Create();
        }

        if (!String.IsNullOrEmpty(SelectedAccount) && !String.IsNullOrEmpty(SampleText))
        {
            await File.WriteAllTextAsync("../db/" + SelectedAccount + ".txt", SampleText);          
        }

        this.StateHasChanged();
    }

}
