@page "/siwe"

@using System.IO;
@using Nethereum.UI;
@using Nethereum.Metamask;
@using Nethereum.Erc20.Blazor;
@using Nethereum.Siwe.Core;
@using siwe;
@using siwe.Messages
@using siwe_nethereum.Data
@using siwe_nethereum.RestServices
@using siwe_rest_service.Models
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@inject SiweRestService _siweRestService;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;

<h2>Notepad Example</h2>
<br/>
<br/>

<MudItem xs="12" sm="6" md="3">
    <MudTextField @bind-Value="SelectedAccount" Label="Selected Account:" Style="width:100vh;" ReadOnly="true" Variant="Variant.Filled" />
</MudItem>
<MudSpacer />
<MudGrid>
    <MudIconButton OnClick="SiweSignIn" Disabled=@BeforeSelectedAccount Size="Size.Medium" Class="ma-2"><img src="assets/SIWE-Button-Rounded-1x-Medium-Color-ColorIcon.png"/></MudIconButton>
</MudGrid>
<MudSpacer />

<MudContainer Class="mt-16 px-8" Style="height:30vh;" MaxWidth="MaxWidth.False">
    <MudSpacer />
    <MudGrid>
    <textarea id="SaveText" name="Mesage to Save" rows="10" cols="100" @oninput="HandleOnChange">
    @SampleText
    </textarea>
    </MudGrid>
</MudContainer>

<MudContainer>
    <MudGrid>
        <MudIconButton Disabled=@BeforeSignedInWithEth Icon="@Icons.Material.Filled.Save" OnClick="UpdateText" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2" />
    </MudGrid>
</MudContainer>

@code {

    [Inject] private IDialogService DialogService { get; set; }

    string SelectedAccount = String.Empty;
    string JwtToken        = String.Empty;

    bool EthereumAvailable { get; set; }
    bool BeforeSelectedAccount {  get;  set; } 
    bool BeforeSignedInWithEth { get; set; }
    string ChainId { get; set; }
    string BlockHash { get; set; }
    string SampleText { get; set;}

    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            BeforeSelectedAccount = true;
            BeforeSignedInWithEth = true;

            _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;

            EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
            SelectedAccount   = await _ethereumHostProvider.GetProviderSelectedAccountAsync();

            if (!String.IsNullOrEmpty(SelectedAccount))
            {
                BeforeSelectedAccount = false;

                FileInfo textFile = new FileInfo("../db/" + SelectedAccount + ".txt");
                if (textFile.Exists)
                    SampleText = await File.ReadAllTextAsync(textFile.FullName);
            }
            else
            {
                SampleText = "Oompa Loompa";
            }

            this.StateHasChanged();
        }

        if (!String.IsNullOrEmpty(SelectedAccount))
        {
            BeforeSelectedAccount = false;

            /**
             ** NOTE: Not yet implemented
             **
            var SelectedNetwork = await _ethereumHostProvider.GetProviderSelectedNetworkAsync();
            if (SelectedNetwork >= 0)
            {
                ChainId = Convert.ToString(SelectedNetwork);
            }
             **/

            ChainId = "1";
        }
    }

    private async Task HandleOnChange(ChangeEventArgs args)
    {
        SampleText = args.Value.ToString();
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount       = account;
        BeforeSelectedAccount = false;

        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    public async Task AuthenticateAsync()
    {
        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();
    }

    protected async Task SiweSignIn()
    {
        if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
        {
            // NOTE: Provider class does not yet implement ENS resolution
            var ENSAddress = String.Empty;

            var newNonce = await _siweRestService.GetNonce();
            if (newNonce.Contains("\""))
                newNonce = newNonce.Replace("\"", string.Empty);

            var message =
                new SiweMessage()
                    {
                        Domain = "localhost"
                        , Address = this.SelectedAccount
                        , ChainId = this.ChainId
                        , Uri = "https://localhost"
                        , Version = "1"
                        , Statement = "SIWE Notepad Example"
                        , Nonce = newNonce
                    };

            message.IssuedAt       = DateTime.UtcNow.ToString("o");
            message.ExpirationTime = DateTime.UtcNow.AddDays(1.0d).ToString("o");

            var signature = await _ethereumHostProvider.SignMessageAsync(message.SignMessage());

            message.Signature = signature;

            var result = await _siweRestService.PostSignIn(message);

            if (!String.IsNullOrEmpty(result.Address))
            {
                BeforeSignedInWithEth = false;

                SampleText = result.Text;
                JwtToken = result.Token;
            }
            else
            {
                BeforeSignedInWithEth = true;

                await DialogService.ShowMessageBox("Error", "Sign In with Ethereum failed.", yesText: "Okay");
            }
        }
    }

    public async Task UpdateText()
    {
        DirectoryInfo dbDir = new DirectoryInfo("../db");        
        if (!dbDir.Exists)
        {
            dbDir.Create();
        }

        if (!String.IsNullOrEmpty(SelectedAccount) && !String.IsNullOrEmpty(SampleText))
        {
            var ReturnedMsgAndText = 
                await _siweRestService.PutSave(new SiweMessageAndText() { Address = SelectedAccount, Text = SampleText, Token = JwtToken });

            if (!String.IsNullOrEmpty(ReturnedMsgAndText.ErrorMsg))
            {
                await DialogService.ShowMessageBox("Error", ReturnedMsgAndText.ErrorMsg, yesText: "Okay");
            }
        }

        this.StateHasChanged();
    }

}
