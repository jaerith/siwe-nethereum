@page "/siwe"

@using System.IO;
@using Nethereum.ENS;
@using Nethereum.Hex.HexTypes;
@using Nethereum.UI;
@using Nethereum.Web3;
@using Nethereum.Metamask;
@using Nethereum.Erc20.Blazor;
@using Nethereum.Siwe.Core;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using siwe;
@using siwe.Messages
@using siwe_nethereum.Data
@using siwe_nethereum.RestServices
@using siwe_rest_service.Models
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider _ethereumHostProvider;
@inject ProtectedLocalStorage BrowserStorage;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@inject SiweRestService _siweRestService;

<h2>Notepad Example</h2>
<br/>
<br/>

<MudItem xs="12" sm="6" md="3">
    <MudTextField @bind-Value="SelectedAccount" Label="Selected Account:" Style="width:100vh;" ReadOnly="true" Variant="Variant.Filled" />
</MudItem>
<MudItem xs="12" sm="6" md="3">
    <MudTextField @bind-Value="EnsName" Label="ENS Name:" Style="width:100vh;" ReadOnly="true" Variant="Variant.Filled" />
</MudItem>
<MudSpacer />
<MudItem>
    <MudIconButton OnClick="SiweSignIn" Disabled=@BeforeSelectedAccount Size="Size.Medium" Class="ma-2"><img src="assets/SIWE-Button-Rounded-1x-Medium-Color-ColorIcon.png"/></MudIconButton>    
    <MudTooltip Text="Sign Out">
        <MudIconButton Disabled=@BeforeSignedInWithEth Icon="@Icons.Filled.Logout" OnClick="SignOut" Variant="Variant.Filled" Color="Color.Primary" style="width:50px;height:50px;" />
    </MudTooltip>
</MudItem>

<MudContainer Class="mt-8 px-8" Style="height:24vh;" MaxWidth="MaxWidth.False">
    <MudAvatar Image="@EnsAvatar" />
    <MudSpacer />
    <MudGrid>
    <textarea id="SaveText" name="Mesage to Save" disabled="@BeforeSignedInWithEth" rows="6" cols="100" @oninput="HandleOnChange">
    @SampleText
    </textarea>
    </MudGrid>
</MudContainer>

<MudContainer>
    <MudGrid>
        <MudTooltip Text="Save Text" Placement="Placement.Right">
            <MudIconButton Disabled=@BeforeSignedInWithEth Icon="@Icons.Material.Filled.Save" OnClick="UpdateText" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="ma-2" />
        </MudTooltip>
    </MudGrid>
</MudContainer>

@code {

    [Inject] private IDialogService DialogService { get; set; }

    private const string CONST_WEB3_URL         = "https://mainnet.infura.io/v3/ddd5ed15e8d443e295b696c0d07c8b02";
    private const string CONST_ENS_METADATA_URL = "https://metadata.ens.domains/mainnet/avatar/{0}/meta";
    private const string CONST_TOKEN_NAME       = "SIWE_TKN";

    string SelectedAccount = String.Empty;
    string EnsName         = String.Empty;
    string EnsUrl          = String.Empty;
    string EnsAvatar       = "https://lh3.googleusercontent.com/hKHZTZSTmcznonu8I6xcVZio1IF76fq0XmcxnvUykC-FGuVJ75UPdLDlKJsfgVXH9wOSmkyHw0C39VAYtsGyxT7WNybjQ6s3fM3macE";
    string JwtToken        = String.Empty;

    bool EthereumAvailable { get; set; }
    bool BeforeSelectedAccount {  get;  set; } 
    bool BeforeSignedInWithEth { get; set; }
    string ChainId { get; set; }
    string BlockHash { get; set; }
    string SampleText { get; set; }

    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            BeforeSelectedAccount = true;
            BeforeSignedInWithEth = true;

            _ethereumHostProvider.SelectedAccountChanged += HostProvider_SelectedAccountChanged;

            EthereumAvailable = await _ethereumHostProvider.CheckProviderAvailabilityAsync();
            SelectedAccount   = await _ethereumHostProvider.GetProviderSelectedAccountAsync();

            if (!String.IsNullOrEmpty(SelectedAccount))
            {
                BeforeSelectedAccount = false;

                await ReadStorage();

                if (!String.IsNullOrEmpty(JwtToken))
                {
                    BeforeSignedInWithEth = false;

                    var msgAndText = await _siweRestService.GetNotepadText(SelectedAccount);
                    SampleText     = msgAndText.Text;
                }

            }
            else
            {
                SampleText = "Oompa Loompa";
            }

            this.StateHasChanged();
        }

        if (!String.IsNullOrEmpty(SelectedAccount))
        {
            BeforeSelectedAccount = false;

            /**
             ** NOTE: Not yet implemented
             **
            var SelectedNetwork = await _ethereumHostProvider.GetProviderSelectedNetworkAsync();
            if (SelectedNetwork >= 0)
            {
                ChainId = Convert.ToString(SelectedNetwork);
            }
             **/

            ChainId = "1";

            if (String.IsNullOrEmpty(EnsName) || String.IsNullOrEmpty(EnsUrl))
            {
                await RetrieveEnsData();

                if (String.IsNullOrEmpty(EnsAvatar))
                {
                    EnsAvatar = "./favicon.ico";
                }
            }
        }
    }

    private async Task HandleOnChange(ChangeEventArgs args)
    {
        SampleText = args.Value.ToString();
    }

    private async Task HostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount       = account;
        BeforeSelectedAccount = false;

        this.StateHasChanged();
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = await _ethereumHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    public async Task AuthenticateAsync()
    {
        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();
    }

    public async Task DeleteStorage()
    {
        await BrowserStorage.DeleteAsync(CONST_TOKEN_NAME);
    }

    public async Task ReadStorage()
    {
        var result = await BrowserStorage.GetAsync<string>(CONST_TOKEN_NAME);
        JwtToken = result.Success ? result.Value : "";
    }

    public async Task RetrieveEnsData()
    {
        try
        {
            var web3       = new Web3(CONST_WEB3_URL);
            var ensService = new ENSService(web3);

            string sLookupAccount = SelectedAccount;            
            
            EnsName = await ensService.ReverseResolveAsync(sLookupAccount);
            EnsUrl  = await ensService.ResolveTextAsync(EnsName, TextDataKey.url);            
        }
        catch (Exception ex)
        {
            System.Console.WriteLine("ERROR!  Problem with retrieving ENS data:\n(" + ex + "\n)");
        }
    }
    
    public async Task SaveToStorage()
    {
        await BrowserStorage.SetAsync(CONST_TOKEN_NAME, JwtToken);
    }

    public async Task SignOut()
    {        
        await DeleteStorage();
        await _siweRestService.PostSignOut(new SiweMessageAndText() { Address = SelectedAccount, Text = SampleText });

        BeforeSignedInWithEth = true;
        SampleText            = JwtToken = String.Empty;
    }

    protected async Task SiweSignIn()
    {
        if (EthereumAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
        {
            // NOTE: Provider class does not yet implement ENS resolution
            var ENSAddress = String.Empty;

            if (String.IsNullOrEmpty(JwtToken))
            {
                var newNonce = await _siweRestService.GetNonce();
                if (newNonce.Contains("\""))
                    newNonce = newNonce.Replace("\"", string.Empty);

                var message =
                    new SiweMessage()
                        {
                            Domain = "localhost"
                            , Address = this.SelectedAccount
                            , ChainId = this.ChainId
                            , Uri = "https://localhost"
                            , Version = "1"
                            , Statement = "SIWE Notepad Example"
                            , Nonce = newNonce
                        };

                message.IssuedAt       = DateTime.UtcNow.ToString("o");
                message.ExpirationTime = DateTime.UtcNow.AddDays(1.0d).ToString("o");
                message.Signature      = await _ethereumHostProvider.SignMessageAsync(message.SignMessage());

                var result = await _siweRestService.PostSignIn(message);
                if (!String.IsNullOrEmpty(result.Address))
                {
                    BeforeSignedInWithEth = false;

                    SampleText = result.Text;
                    JwtToken   = result.Token;

                    await SaveToStorage();
                }
                else
                {
                    BeforeSignedInWithEth = true;
                    await DialogService.ShowMessageBox("Error", "Sign In with Ethereum failed.", yesText: "Okay");
                }
            }
            else
            {
                var msgAndText = await _siweRestService.GetNotepadText(SelectedAccount);

                BeforeSignedInWithEth = false;
                SampleText = msgAndText.Text;
            }
        }
    }

    public async Task UpdateText()
    {
        DirectoryInfo dbDir = new DirectoryInfo("../db");        
        if (!dbDir.Exists)
        {
            dbDir.Create();
        }

        if (!String.IsNullOrEmpty(SelectedAccount) && !String.IsNullOrEmpty(SampleText))
        {
            var ReturnedMsgAndText = 
                await _siweRestService.PutSave(new SiweMessageAndText() { Address = SelectedAccount, Text = SampleText, Token = JwtToken });

            if (!String.IsNullOrEmpty(ReturnedMsgAndText.ErrorMsg))
            {
                await DialogService.ShowMessageBox("Error", ReturnedMsgAndText.ErrorMsg, yesText: "Okay");
            }
        }

        this.StateHasChanged();
    }

}
